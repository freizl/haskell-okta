{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}

module LoginWithOkta (app, waiApp) where


import           Control.Applicative
import           Data.Maybe
import           Data.Text.Lazy            (Text)
import qualified Data.Text.Lazy            as TL
import qualified Network.Wai               as WAI
import           Prelude                   hiding (exp)
import           Web.Scotty


import           Okta.Samples.Common.OIDC
import           Okta.Samples.Common.Types
import qualified Web.Scotty.Okta.App       as Okta
import           Web.Scotty.Okta.Handlers
import           Web.Scotty.Okta.Sessions


------------------------------
-- App
------------------------------

app :: AppOption -> IO ()
app opt = do
  print opt
  let c = fromAppOptionToConfig opt
  Okta.runApp c (waiApp opt c)

waiApp :: AppOption -> Config -> OpenIDConfiguration -> IO WAI.Application
waiApp opt c oc = Okta.waiApp opt $ do
  get "/" homeH
  get "/login-redirect" $ loginRedirectH c oc
  get "/login-siw" $ loginCustomH c
  get "/authorization-code/callback" $ callbackH c oc
  get "/profile" $ profileH c
  get "/logout" logoutH

fromAppOptionToConfig :: AppOption -> Config
fromAppOptionToConfig AppOption{..} =
  let iss = maybe _appIssuer (TL.append (_appIssuer `TL.append` "/oauth2/")) _appCustomASId
  in
    Config (OIDC (TL.unwords _appScopes) iss _appClientId _appClientSecret _appRedirectUri Nothing) _appPort

--------------------------------------------------
-- * Handlers
--------------------------------------------------

loginRedirectH :: Config -> OpenIDConfiguration -> ActionM ()
loginRedirectH c oc = withCookieUserM (const redirectToProfileM) (loginToOkta c oc generatedState generatedNonce)

callbackH :: Config -> OpenIDConfiguration -> ActionM ()
callbackH c oc = do
  -- params from cookie which is generated by okta-signin-widget
  stateC <- getCookiesM "okta-oauth-state"
  nonceC <- getCookiesM "okta-oauth-nonce"
  authorizeCallbackH c oc (stateC <|> Just generatedState) (nonceC <|> Just generatedNonce)

generatedState :: Text
generatedState = "okta-hosted-login-state-xyz"

generatedNonce :: Text
generatedNonce = "okta-hosted-login-nonce-123"
